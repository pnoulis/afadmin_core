* About
This file acts as a scratch pad towards the development of this repository.
* TODO Set up the mqtt client
** DONE the mqtt client needs a logger
CLOSED: [2023-03-12 Sun 13:49]
install pino
** TODO the mqtt client needs to be tested
** TODO the mqtt client needs some automated way of getting its configuration
* Logging using pino
** resources
https://betterstack.com/community/guides/logging/how-to-install-setup-and-use-pino-to-log-node-js-applications/
https://github.com/pinojs/pino
https://getpino.io/#/
https://getpino.io/#/docs/api?id=options
** Features
*** configuring the log event format at instantiation, runtime and invocation time.
*** configuring the standard log methods through the use of hooks
*** Redirecting log events to all sorts of channels (stdout, services, streams, files, etc...)

** Formatting the log event object
Pino allows the customization of the log event object at instantiation, runtime
and invocation time.

*** Customization options that alter the format of the log event
#+begin_src javascript
  {
    // @param { undefined | string }
    // if defined log is appended a { name: '' }
    name: undefined,

    // @param { number }
    // limit the stringification of the log event
    depthLimit: 5,

    // @param { function }
    // @returns { object }
    // returned object is merged with the log event
    // must be a pure function
    // nestedKey and mixinMergeStrategy alter the behavior of the mixin
    mixin: (_context, level) => undefined,

  }
#+end_src

*** Instantiation time
#+begin_src javascript
  pino({
    name: the name
  })
#+end_src

*** level
By default pino includes the log level in the log event which is a number.
#+begin_src javascript
  // transform the pino log level into its label and then uppercase it.
  pino({
    formatters: {
      level: (label) => {
        return { level: label.toUpperCase() };
      },
    },
  })
#+end_src
*** time
By default pino includes the time the log event occurred.
format: Date.now()
#+begin_src javascript
  pino({
    timestamp: pino.stdTimeFunctions.isoTime,
  })
#+end_src
*** Bindings
**** hostname
**** pid
** log levels
fatar
error
warn
info
debug
trace
** Transporting
** Pino configuration
Pino can be configured at:

- Instantiation time
  Through the pino constructor

  example:
  pino([options], [destination]) => logger

- Runtime
  Through pino setters

  example:
  pino.level = 10;


The log level is used to control which events are logged.

The log level should be an environment variable.

LOG_LEVEL

its value should be defined according to the mode the application is running in.

if on DEV mode
LOG_LEVEL=trace
if on PROD mode
LOG_LEVEL=info


The log level option should be provided by an environment variable.
that environment variable should in turn be based on the mode the app is operating on.

* Testing using vitest
** resources
https://vitest.dev/
https://vitest.dev/guide/

** File structure
** Configuring vitest
*** How?
#+begin_src javascript
  // through a configuration file
  PKG_SRCDIR/vitest.config.{js,ts}
  // through vite configuration file
  PKG_SRCDIR/vite.config.{js,ts}

  import { defineConfig } from 'vitest/config';
  export default defineConfig({
    test: {
      // ...
    }
  })

#+end_src

*** configuration options
**** location of tests and filename matching
#+begin_src javascript
  const vitestConfig = {

    // @params { []strings }
    // default: ['**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}']
    include: [],

    // @params { []strings }
    // default: ['**/node_modules/**', '**/dist/**', '**/cypress/**']
    exclude: [],
    root: '.'
#+end_src

* TODO Test the logger
* Mqtt client refactoring
** DONE mqtt publish needs to take into account req-res modes
CLOSED: [2023-03-21 Tue 12:43]
A server publishes a message in a fire and forget fashion.
While a client publishes a message and might need to.

mode: 'ff',
mode: 'response',
mode: 'persistent'
* Agent factory machine
Has teams
Each team has a roster.
A roster is made up of players.
Each player is assigned a wristband.
** DONE Create team
CLOSED: [2023-03-20 Mon 23:13]
afm.teams.create({})
** DONE Remove team
CLOSED: [2023-03-20 Mon 23:13]
afm.teams.rm(teamId)
** DONE create player
CLOSED: [2023-03-23 Thu 15:40]
** DONE register player
CLOSED: [2023-03-23 Thu 15:40]
afm.players.register();
** DONE login player
CLOSED: [2023-03-23 Thu 15:40]
afm.players.login();
** TODO assign wristband
*** DONE subscribe to wristband scan
CLOSED: [2023-03-24 Fri 09:03]
*** TODO request wristband info
** Persisting
the afm.save();
* Environment variables
** backend variables
BACKEND_AUTH_USERNAME=
BACKEND_AUTH_PASSWORD=
VITE_BACKEND_PREFIX
VITE_BACKEND_LOGLEVEL
BACKEND_PROTOCOL=
BACKEND_HOST=
BACKEND_PORT=
VITE_BACKEND_URL=${BACKEND_PROTOCOL}://${BACKEND_AUTH_USERNAME}:${BACKEND_AUTH_PASSWORD}@${BACKEND_HOST}:${BACKEND_PORT}
VITE_BACKEND_CLIENT_ID=

* emulate scan in mqtt explorer
/themaze/registration5/emulateScan/r/r

* TODO services must be explicitly started so that VITE_NO_AFM can work
* Search Player
** useClick
CLICK on the reference el -> toggles ON OFF

ENTER on the reference el
while the keyboardHandlers FLAG -> toggles ON OFF

SPACE on the reference el
while the keyboardHandlers FLAG is ON -> toggles ON OFF
** useFocus
FOCUS on the reference el -> toggles ON OFF

CLICK on the reference el
while the keyboardOnly FLAG is OFF -> toggles ON OFF
